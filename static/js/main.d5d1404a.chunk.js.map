{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getPhotos","axios","method","url","dataResponse","params","key","per_page","then","result","setState","images","data","hits","imageRendering","console","log","state","visibleImages","catch","err","imagesClone","renImagesClone","i","push","shift","isLoading","_this2","document","addEventListener","event","window","innerHeight","scrollY","body","offsetHeight","react_default","a","createElement","className","onClick","onScroll","map","image","undefined","largeImageURL","src","alt","tags","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRA2HeA,qBAtHb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QA6BFI,UAAY,WACVC,IAAO,CACLC,OAAO,MACPC,IAAK,2BACLC,aAAc,QACdC,OAAQ,CACNC,IAAK,qCACLC,SAAU,OAGXC,KAAK,SAACC,GAGLhB,EAAKiB,SAAS,CACZC,OAAQF,EAAOG,KAAKC,OAEtBpB,EAAKqB,iBACLC,QAAQC,IAAI,iBAAkBvB,EAAKwB,MAAMC,iBAE1CC,MAAM,SAACC,GACNL,QAAQC,IAAI,wBAAyBI,MAlD9B3B,EAuDbqB,eAAiB,WAIf,IAHA,IAAMO,EAAc5B,EAAKwB,MAAMN,OACzBW,EAAiB7B,EAAKwB,MAAMC,cAEzBK,EAAI,EAAGA,EAAI,GAAIA,IAEtBD,EAAeE,KAAKH,EAAY,IAChCA,EAAYI,QAEdhC,EAAKiB,SAAS,CACZC,OAAQU,EACRH,cAAeI,KA9DjB7B,EAAKwB,MAAQ,CACXN,OAAQ,GACRO,cAAe,GAEfQ,WAAW,GARFjC,mFAcM,IAAAkC,EAAA/B,KAEjBgC,SAASC,iBAAiB,SAAW,SAACC,GAE/BC,OAAOC,YAAcD,OAAOE,SAAYL,SAASM,KAAKC,eAEzDpB,QAAQC,IAAI,gBACZW,EAAKb,oBAIN,oCAiDH,OACEsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cAEEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,uCAA8BF,EAAAC,EAAAC,cAAA,WAA9B,mEAEAF,EAAAC,EAAAC,cAAA,UAAQE,QAAS5C,KAAKI,WAAtB,0BAEAoC,EAAAC,EAAAC,cAAA,UAAQE,QAAS5C,KAAKkB,gBAAtB,sBAEAsB,EAAAC,EAAAC,cAAA,OAAKG,SAAU7C,KAAKkB,mBAKxBsB,EAAAC,EAAAC,cAAA,WAASC,UAAU,WAUf3C,KAAKqB,MAAMC,cAAcwB,IAAK,SAAAC,GAC9B,QAAcC,IAAVD,EACF,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAajC,SAAesC,IAAVD,EAAsB5B,QAAQC,IAAI,gBAAkB2B,EAAME,eACvFF,EAAME,cAAgBT,EAAAC,EAAAC,cAAA,OAAKQ,IAAKH,EAAME,cAAeE,IAAKJ,EAAMK,OAAU,iBAzG5EC,cCQEC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAAS5B,SAAS6B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GACjCA,EAAaC","file":"static/js/main.d5d1404a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    // Default/initial state for our application\n    this.state = {\n      images: [],\n      visibleImages: [],\n \n      isLoading: true\n    }\n  }\n\n\n    // function to do something (on scroll) when scrolled to the right point, get more images and update the state\n  componentDidMount(){\n    // code to register an event listener  (ex document.addEventListener like scroll and pass a functino to run when sroll happens)\n    document.addEventListener('scroll',  (event) => {\n      \n      if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {\n        // you're at the bottom of the page\n        console.log(\"Scroll Test!\");\n        this.imageRendering()\n      }\n      \n  \n    }, true /*Capture event*/);\n  \n    }\n\n\n  getPhotos = () => {\n    axios( {\n      method:'GET',\n      url: 'https://pixabay.com/api/',\n      dataResponse: 'jsonp',\n      params: {\n        key: '12624950-1e2c848ae9138ca54d5e56079',\n        per_page: 200\n        }\n      })\n      .then((result) => {\n\n        \n        this.setState({\n          images: result.data.hits  \n        });\n        this.imageRendering();\n        console.log(\"Visible Images\", this.state.visibleImages)\n        \n    }).catch((err) => {\n        console.log(\"The axios call failed\", err)\n    });\n  }\n\n\n  imageRendering = () => {\n    const imagesClone = this.state.images;\n    const renImagesClone = this.state.visibleImages;\n    \n    for (let i = 0; i < 20; i++) {\n\n      renImagesClone.push(imagesClone[0])\n      imagesClone.shift()\n    }\n    this.setState({\n      images: imagesClone,\n      visibleImages: renImagesClone\n    })\n\n  }\n  \n\n  render(){\n    \n    return (\n      <div className=\"App\">\n        <header>\n\n          <div className=\"titleButtonContainer\">\n            <h1>Generate a random gallery.<br></br>Scroll to the bottom to get more images or just hit the button!</h1>\n\n            <button onClick={this.getPhotos}>Click me for pictures!</button>\n\n            <button onClick={this.imageRendering}>Get MORE pictures!</button>\n\n            <div onScroll={this.imageRendering}></div>  \n          </div>\n          \n          \n        </header>\n        <section className=\"gallery\">\n\n          {/* A function to populate images which are in divs....\n          ....or should I just put 30 divs and have them append to the DOM?  Answer: MVP */\n\n          /*\n          * map over this.state.images\n          * put the https link for the images in your <img> src\n          */}\n          \n          { this.state.visibleImages.map( image => {\n            if (image !== undefined){   \n              return (\n                <div className=\"imageSizer\" key={image === undefined ? console.log(\"Null Message\") : image.largeImageURL}>\n                  { image.largeImageURL ? <img src={image.largeImageURL} alt={image.tags}/> : null }\n                </div>\n              )\n            }\n          })}\n        \n\n        </section>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}